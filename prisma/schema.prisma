generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  events        Event[]   @relation("EventOrganizer")
  orders        Order[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  venue       String
  address     String
  date        DateTime
  image       String?
  posterUrl   String?
  youtubeUrl  String?
  capacity    Int
  status      EventStatus @default(PUBLISHED)
  organizerId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categories  Category[]
  organizer   User        @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  orders      Order[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  price       Float
  maxQuantity Int
  available   Int
  eventId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets     Ticket[]
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique @default(cuid())
  userId          String
  eventId         String
  status          OrderStatus   @default(PENDING)
  total           Float
  currency        String        @default("USD")
  paymentMethod   PaymentMethod
  paymentIntentId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event           Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  payment         Payment?
  tickets         Ticket[]
}

model Ticket {
  id           String       @id @default(cuid())
  ticketNumber String       @unique @default(cuid())
  orderId      String
  categoryId   String
  qrCode       String       @unique
  status       TicketStatus @default(ACTIVE)
  scannedAt    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  order        Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  category     Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String        @unique
  amount          Float
  status          PaymentStatus @default(PENDING)
  method          PaymentMethod
  paymentIntentId String?
  paypalOrderId   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ORGANIZER
  ADMIN
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
}

model HomepageContent {
  id             String   @id @default(cuid())
  heroTitle      String
  heroSubtitle   String
  heroButtonText String
  featuredText   String?
  announcement   String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PastEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  venue       String
  date        DateTime
  image       String?
  attendees   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
